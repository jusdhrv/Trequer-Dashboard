-- Create settings table
CREATE TABLE settings (
    id SERIAL PRIMARY KEY,
    key TEXT NOT NULL UNIQUE,
    value INTEGER NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create diagnostic_readings table
CREATE TABLE diagnostic_readings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cpu_usage DECIMAL NOT NULL,
    cpu_temperature DECIMAL NOT NULL,
    disk_usage DECIMAL NOT NULL,
    memory_usage DECIMAL NOT NULL,
    network_usage DECIMAL NOT NULL,
    system_uptime DECIMAL NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX idx_diagnostic_readings_timestamp ON diagnostic_readings(timestamp);

-- Insert default settings
INSERT INTO settings (key, value, description) VALUES
    ('sensor_readings_retention_hours', 168, 'Data retention duration for sensor readings in hours (default: 7 days)'),
    ('diagnostic_readings_retention_hours', 72, 'Data retention duration for diagnostic readings in hours (default: 3 days)');

-- Create function to delete old sensor readings based on retention setting
CREATE OR REPLACE FUNCTION delete_old_sensor_readings()
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    retention_hours INTEGER;
BEGIN
    -- Get retention hours from settings
    SELECT value INTO retention_hours
    FROM settings
    WHERE key = 'sensor_readings_retention_hours';

    -- Delete old readings
    DELETE FROM sensor_readings
    WHERE timestamp < NOW() - (retention_hours || ' hours')::INTERVAL;
END;
$$;

-- Create function to delete old diagnostic readings based on retention setting
CREATE OR REPLACE FUNCTION delete_old_diagnostic_readings()
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    retention_hours INTEGER;
BEGIN
    -- Get retention hours from settings
    SELECT value INTO retention_hours
    FROM settings
    WHERE key = 'diagnostic_readings_retention_hours';

    -- Delete old readings
    DELETE FROM diagnostic_readings
    WHERE timestamp < NOW() - (retention_hours || ' hours')::INTERVAL;
END;
$$;

-- Schedule the cleanup jobs to run every hour
SELECT cron.schedule(
    'cleanup-old-sensor-readings',
    '0 * * * *',  -- Run at minute 0 of every hour
    $$SELECT delete_old_sensor_readings();$$
);

SELECT cron.schedule(
    'cleanup-old-diagnostic-readings',
    '0 * * * *',  -- Run at minute 0 of every hour
    $$SELECT delete_old_diagnostic_readings();$$
);

-- Enable Row Level Security but allow all operations
ALTER TABLE settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE diagnostic_readings ENABLE ROW LEVEL SECURITY;

-- Create policies that allow all operations for everyone
CREATE POLICY "Allow all operations for everyone on settings"
    ON settings FOR ALL
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow all operations for everyone on diagnostic_readings"
    ON diagnostic_readings FOR ALL
    USING (true)
    WITH CHECK (true); 